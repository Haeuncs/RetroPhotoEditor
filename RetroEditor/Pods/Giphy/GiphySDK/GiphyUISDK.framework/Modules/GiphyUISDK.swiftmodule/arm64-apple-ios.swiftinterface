// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.1 (swiftlang-1100.0.270.13 clang-1100.0.33.7)
// swift-module-flags: -target arm64-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name GiphyUISDK
import AVFoundation
import DeepDiff
import Foundation
import GiphyCoreSDK
@_exported import GiphyUISDK
import PINCache
import Swift
import UIKit
@objc public enum GPHThemeType : Swift.Int {
  case dark
  case light
  case lightBlur
  case darkBlur
  case automatic
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @objcMembers open class GPHTheme : ObjectiveC.NSObject {
  @objc convenience public init(type: GiphyUISDK.GPHThemeType)
  @objc public var type: GiphyUISDK.GPHThemeType
  @objc open var searchBarActiveBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc open var searchBarBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc open var suggestionCellBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc open var suggestionCellTextColor: UIKit.UIColor {
    @objc get
  }
  @objc open var placeholderTextColor: UIKit.UIColor {
    @objc get
  }
  @objc open var textFieldTextColor: UIKit.UIColor {
    @objc get
  }
  @objc open var selectButtonColor: UIKit.UIColor {
    @objc get
  }
  @objc open var selectButtonTextColor: UIKit.UIColor {
    @objc get
  }
  @objc open var searchBarPadding: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var searchBarCornerRadius: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var cellCornerRadius: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var textFieldFont: UIKit.UIFont? {
    @objc get
  }
  @objc open var backgroundColorForLoadingCells: UIKit.UIColor {
    @objc get
  }
  @objc open var showSuggestionsBar: Swift.Bool {
    @objc get
  }
  @objc open var buttonIcon: UIKit.UIImage? {
    @objc get
  }
  @objc open var searchButtonColor: UIKit.UIColor {
    @objc get
  }
  @objc open var keyboardAppearance: UIKit.UIKeyboardAppearance {
    @objc get
  }
  @objc open var placeholderColor: UIKit.UIColor {
    @objc get
  }
  @objc open var backgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc open var textColor: UIKit.UIColor {
    @objc get
  }
  @objc open var handleBarColor: UIKit.UIColor {
    @objc get
  }
  @objc open var gridDimColor: UIKit.UIColor {
    @objc get
  }
  @objc open var tabBarSwitchSelectedColor: UIKit.UIColor {
    @objc get
  }
  @objc open var tabBarBackgroundAlpha: CoreGraphics.CGFloat {
    @objc get
  }
  @objc open var stickerBackgroundColor: UIKit.UIColor {
    @objc get
  }
  @objc open var fixedSizeCells: Swift.Bool {
    @objc get
  }
  @objc open var blurStyle: UIKit.UIBlurEffect.Style {
    @objc get
  }
  @objc override dynamic public init()
  @objc deinit
}
extension GiphyViewController : UIKit.UIViewControllerAnimatedTransitioning {
  @objc dynamic public func transitionDuration(using transitionContext: UIKit.UIViewControllerContextTransitioning?) -> Foundation.TimeInterval
  @objc dynamic public func animateTransition(using transitionContext: UIKit.UIViewControllerContextTransitioning)
}
extension GiphyViewController : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic public func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic public func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
@objc public enum GPHFileExtension : Swift.Int {
  case mp4
  case gif
  case webp
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension GPHMedia {
  public func url(rendition: GiphyCoreSDK.GPHRenditionType, fileType: GiphyUISDK.GPHFileExtension) -> Swift.String?
  public var aspectRatio: CoreGraphics.CGFloat {
    get
  }
}
@objc public class GPHAttributionView : UIKit.UIButton {
  public var theme: GiphyUISDK.GPHTheme {
    get
    set
  }
  public var name: Swift.String {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc public class GPHTextField : UIKit.UITextField {
  @objc override dynamic public var next: UIKit.UIResponder? {
    @objc get
  }
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public func textRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic public func editingRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GiphyViewController {
  @objc public static var trayHeightMultiplier: CoreGraphics.CGFloat
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
}
@objc @objcMembers public class GiphyViewController : UIKit.UIViewController {
  @objc public func setAPIKey(_ apiKey: Swift.String, verificationMode: Swift.Bool = false)
  @objc convenience dynamic public init()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc weak public var delegate: GiphyUISDK.GiphyDelegate? {
    @objc get
    @objc set
  }
  public var selectedContentType: GiphyUISDK.GPHContentType? {
    get
    set
  }
  @objc public var showMoreByUser: Swift.String? {
    @objc get
    @objc set
  }
  @objc public var stickerColumnCount: GiphyUISDK.GPHStickerColumnCount {
    @objc get
    @objc set
  }
  @objc public var showViewOnGiphy: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var showConfirmationScreen: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var shouldLocalizeSearch: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var theme: GiphyUISDK.GPHTheme {
    @objc get
    @objc set
  }
  public var mediaTypeConfig: [GiphyUISDK.GPHContentType] {
    get
    set
  }
  @objc(setMediaConfigWithTypes:) public func setMediaConfig(types: Swift.Array<Swift.Int>)
  @objc public var rating: GiphyCoreSDK.GPHRatingType {
    @objc get
    @objc set
  }
  @objc public var dimBackground: Swift.Bool {
    @objc get
    @objc set
  }
  @objc public var renditionType: GiphyCoreSDK.GPHRenditionType {
    @objc get
    @objc set
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc deinit
}
public protocol GPHSearchBarDelegate : AnyObject {
  func searchBarTextDidChange(_ searchBarView: GiphyUISDK.GPHSearchBar, query: Swift.String)
  func searchBarFocusDidChange(_ searchBarView: GiphyUISDK.GPHSearchBar, focused: Swift.Bool, text: Swift.String)
}
@objc public class GPHSearchBar : UIKit.UIView {
  public func beginEditing()
  public func endEditing()
  public func setText(_ text: Swift.String)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GPHSearchBar : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldEndEditing(_ textField: UIKit.UITextField) -> Swift.Bool
}
@objc public protocol GPHGridDelegate : AnyObject {
  @objc func contentDidUpdate(resultCount: Swift.Int)
  @objc func didSelectMedia(media: GiphyCoreSDK.GPHMedia, cell: UIKit.UICollectionViewCell)
  @objc optional func didScroll(offset: CoreGraphics.CGFloat)
}
@objc @objcMembers public class GiphyGridController : UIKit.UIViewController {
  @objc weak public var delegate: GiphyUISDK.GPHGridDelegate?
  @objc public var direction: UIKit.UICollectionView.ScrollDirection
  @objc public var theme: GiphyUISDK.GPHTheme {
    @objc get
    @objc set
  }
  @objc public var rating: GiphyCoreSDK.GPHRatingType {
    @objc get
    @objc set
  }
  @objc public var content: GiphyUISDK.GPHContent
  @objc public var cellPadding: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  public var numberOfTracks: Swift.Int? {
    get
    set
  }
  @objc public func setNumberOfTracks(_ tracks: Swift.Int)
  @objc public var fixedSizeCells: Swift.Bool
  @objc public var imageType: GiphyUISDK.GPHFileExtension
  @objc public func setAPIKey(_ apiKey: Swift.String, verificationMode: Swift.Bool = false)
  @objc convenience dynamic public init()
  @objc public var showViewOnGiphy: Swift.Bool
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLoad()
  @objc public var renditionType: GiphyCoreSDK.GPHRenditionType
  @objc public func update()
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GiphyGridController : UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
extension GiphyGridController : GiphyUISDK.GPHWaterfallLayoutDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, sizeForSectionItem indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc dynamic public func numberOfColumns(forItemAt index: Swift.Int) -> Swift.Int
  @objc dynamic public func scrollDirection() -> UIKit.UICollectionView.ScrollDirection
}
extension GiphyGridController : UIKit.UICollectionViewDelegate {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
}
extension GiphyGridController : GiphyCoreSDK.GPHTrackingDelegate {
  @objc dynamic public func mediaForIndexPath(_ item: Foundation.IndexPath) -> GiphyCoreSDK.GPHMedia?
  @objc dynamic public func mediaIsLoadedAtIndexPath(_ item: Foundation.IndexPath) -> Swift.Bool
}
extension GiphyGridController : UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, minimumInteritemSpacingForSectionAt section: Swift.Int) -> CoreGraphics.CGFloat
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
}
extension GiphySearchController : GiphyUISDK.GPHSearchBarDelegate {
  @objc dynamic public func searchBarFocusDidChange(_ searchBarView: GiphyUISDK.GPHSearchBar, focused: Swift.Bool, text: Swift.String)
  @objc dynamic public func searchBarTextDidChange(_ searchBarView: GiphyUISDK.GPHSearchBar, query: Swift.String)
}
@objc public class Giphy : ObjectiveC.NSObject {
  @objc public class func configure(apiKey: Swift.String, verificationMode: Swift.Bool = false)
  @objc override dynamic public init()
  @objc deinit
}
@objc public protocol GiphyDelegate : AnyObject {
  @objc optional func didSearch(for term: Swift.String)
  @objc func didSelectMedia(giphyViewController: GiphyUISDK.GiphyViewController, media: GiphyCoreSDK.GPHMedia)
  @objc func didDismiss(controller: GiphyUISDK.GiphyViewController?)
}
@objc @objcMembers public class GiphySearchController : UIKit.UIViewController {
  @objc public var showViewOnGiphy: Swift.Bool
  @objc public var showConfirmationScreen: Swift.Bool
  @objc public var shouldLocalizeSearch: Swift.Bool
  @objc public var theme: GiphyUISDK.GPHTheme {
    @objc get
    @objc set
  }
  public var mediaTypeConfig: [GiphyUISDK.GPHContentType] {
    get
    set
  }
  @objc weak public var delegate: GiphyUISDK.GiphyDelegate?
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLoad()
  public var selectedContentType: GiphyUISDK.GPHContentType? {
    get
    set
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GiphySearchController : GiphyUISDK.GPHTabBarDelegate {
  @objc dynamic public func selectedContentTypeDidChange(_ contentType: GiphyUISDK.GPHContentType)
}
extension GiphySearchController {
  @objc dynamic public func didTapUsername(_ username: Swift.String)
  @objc dynamic public func didLongPressCell(_ cell: GiphyUISDK.GPHMediaCell?)
}
extension GiphySearchController : GiphyUISDK.GPHGridDelegate {
  @objc dynamic public func contentDidUpdate(resultCount: Swift.Int)
  @objc dynamic public func didScroll(offset: CoreGraphics.CGFloat)
  @objc dynamic public func didSelectMedia(media: GiphyCoreSDK.GPHMedia, cell: UIKit.UICollectionViewCell)
}
@objc public class GPHMediaCell : UIKit.UICollectionViewCell {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public func prepareForReuse()
  @objc deinit
}
@objc public enum GPHStickerColumnCount : Swift.Int {
  public static var defaultSetting: GiphyUISDK.GPHStickerColumnCount {
    get
  }
  case two
  case three
  case four
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public enum GPHContentType : Swift.Int, Swift.RawRepresentable {
  case recents
  case gifs
  case stickers
  case text
  case emoji
  public static var defaultSetting: [GiphyUISDK.GPHContentType] {
    get
  }
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc public enum GPHGifButtonColor : Swift.Int {
  case pink
  case blue
  case black
  case white
  public static var defaultSetting: GiphyUISDK.GPHGifButtonColor {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc public protocol GPHMediaViewDelegate : AnyObject {
  @objc func didPressMoreByUser(_ user: Swift.String)
}
@objc @objcMembers public class GPHMediaView : GiphyUISDK.GiphyYYAnimatedImageView {
  @objc weak public var delegate: GiphyUISDK.GPHMediaViewDelegate?
  @objc public var media: GiphyCoreSDK.GPHMedia? {
    @objc get
    @objc set
  }
  @objc convenience dynamic public init()
  @objc public func loadAsset(at url: Swift.String, queueOriginalRendition: Swift.Bool = false)
  @objc public func cancelLoading()
  @objc override dynamic public var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public init(image: UIKit.UIImage?)
  @available(iOS 3.0, *)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension GPHMediaView {
  @objc dynamic public func setMedia(_ media: GiphyCoreSDK.GPHMedia, rendition: GiphyCoreSDK.GPHRenditionType = .fixedWidth, shouldQueueOriginalRendition: Swift.Bool = false)
}
public protocol GPHSuggestionCellDelegate : AnyObject {
  func suggestionSelected(term: Swift.String)
}
public class GPHCache {
  public static let shared: GiphyUISDK.GPHCache
  public func clear()
  @discardableResult
  public func downloadAssetData(_ urlString: Swift.String, completion: ((Foundation.NSData?, Swift.Error?) -> Swift.Void)?) -> Foundation.URLSessionDataTask?
  @discardableResult
  public func downloadAsset(_ urlString: Swift.String, completion: ((GiphyUISDK.GiphyYYImage?, Swift.Error?) -> Swift.Void)?) -> Foundation.URLSessionDataTask?
  @objc deinit
}
extension GPHCache {
  public var diskCacheByteLimit: Swift.UInt {
    get
    set
  }
  public var memoryCacheCostLimit: Swift.UInt {
    get
    set
  }
  public var memoryCacheAgeLimit: Foundation.TimeInterval {
    get
    set
  }
  public var diskCacheAgeLimit: Foundation.TimeInterval {
    get
    set
  }
}
extension GPHMedia {
  public func nonAdVersion() -> GiphyCoreSDK.GPHMedia
}
@objc @objcMembers public class GPHContent : ObjectiveC.NSObject {
  @objc public var contentCopy: GiphyUISDK.GPHContent {
    @objc get
  }
  @objc public class var trendingGifs: GiphyUISDK.GPHContent {
    @objc get
  }
  @objc public class var trendingStickers: GiphyUISDK.GPHContent {
    @objc get
  }
  @objc public class var trendingText: GiphyUISDK.GPHContent {
    @objc get
  }
  @objc public class var emoji: GiphyUISDK.GPHContent {
    @objc get
  }
  @objc public class var recents: GiphyUISDK.GPHContent {
    @objc get
  }
  @objc public class func search(withQuery queryString: Swift.String, mediaType: GiphyCoreSDK.GPHMediaType, language: GiphyCoreSDK.GPHLanguageType) -> GiphyUISDK.GPHContent
  @objc public class func trending(mediaType: GiphyCoreSDK.GPHMediaType) -> GiphyUISDK.GPHContent
  @objc override dynamic public init()
  @objc deinit
}
extension GPHClient {
  @discardableResult
  public func channelsSearch(_ query: Swift.String, offset: Swift.Int = 0, limit: Swift.Int = 25, completionHandler: @escaping (GiphyCoreSDK.GPHListChannelResponse?, Swift.Error?) -> Swift.Void) -> Foundation.Operation
}
@objc public class GPHIcons : ObjectiveC.NSObject {
  public class func giphyLogo() -> UIKit.UIImage
  @objc override dynamic public init()
  @objc deinit
}
@objc public class GPHNoResults : UIKit.UIView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension UIView {
  public var safeTopAnchor: UIKit.NSLayoutYAxisAnchor {
    get
  }
  public var safeBottomAnchor: UIKit.NSLayoutYAxisAnchor {
    get
  }
  public var safeLeftAnchor: UIKit.NSLayoutXAxisAnchor {
    get
  }
  public var safeRightAnchor: UIKit.NSLayoutXAxisAnchor {
    get
  }
  public var safeWidthAnchor: UIKit.NSLayoutDimension {
    get
  }
  public var safeBottomInset: CoreGraphics.CGFloat {
    get
  }
  public var safeLeftInset: CoreGraphics.CGFloat {
    get
  }
  public var safeRightInset: CoreGraphics.CGFloat {
    get
  }
}
public protocol GPHTabBarDelegate : AnyObject {
  func selectedContentTypeDidChange(_ contentType: GiphyUISDK.GPHContentType)
}
@objc public class GPHTabBar : UIKit.UIView {
  weak public var delegate: GiphyUISDK.GPHTabBarDelegate?
  public var mediaTypeConfig: [GiphyUISDK.GPHContentType] {
    get
    set
  }
  @objc deinit
}
@objc public protocol GPHWaterfallLayoutDelegate : AnyObject {
  @objc func collectionView(_ collectionView: UIKit.UICollectionView, sizeForSectionItem indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc func numberOfColumns(forItemAt index: Swift.Int) -> Swift.Int
  @objc func scrollDirection() -> UIKit.UICollectionView.ScrollDirection
}
@objc public class GPHWaterfallLayoutAttributes : UIKit.UICollectionViewLayoutAttributes {
  @objc override dynamic public func copy(with zone: ObjectiveC.NSZone? = nil) -> Any
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
extension GiphyUISDK.GPHThemeType : Swift.Equatable {}
extension GiphyUISDK.GPHThemeType : Swift.Hashable {}
extension GiphyUISDK.GPHThemeType : Swift.RawRepresentable {}
extension GiphyUISDK.GPHFileExtension : Swift.Equatable {}
extension GiphyUISDK.GPHFileExtension : Swift.Hashable {}
extension GiphyUISDK.GPHFileExtension : Swift.RawRepresentable {}
extension GiphyUISDK.GPHStickerColumnCount : Swift.Equatable {}
extension GiphyUISDK.GPHStickerColumnCount : Swift.Hashable {}
extension GiphyUISDK.GPHStickerColumnCount : Swift.RawRepresentable {}
extension GiphyUISDK.GPHContentType : Swift.Hashable {}
extension GiphyUISDK.GPHGifButtonColor : Swift.Equatable {}
extension GiphyUISDK.GPHGifButtonColor : Swift.Hashable {}
extension GiphyUISDK.GPHGifButtonColor : Swift.RawRepresentable {}
